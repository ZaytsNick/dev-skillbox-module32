// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Task_3.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_Task_5f3_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Task_5f3_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Task_5f3_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Task_5f3_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Task_5f3_2eproto;
class compani;
struct companiDefaultTypeInternal;
extern companiDefaultTypeInternal _compani_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class compani final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:compani) */ {
 public:
  inline compani() : compani(nullptr) {}
  ~compani() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR compani(
      ::google::protobuf::internal::ConstantInitialized);

  inline compani(const compani& from) : compani(nullptr, from) {}
  inline compani(compani&& from) noexcept
      : compani(nullptr, std::move(from)) {}
  inline compani& operator=(const compani& from) {
    CopyFrom(from);
    return *this;
  }
  inline compani& operator=(compani&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const compani& default_instance() {
    return *internal_default_instance();
  }
  static inline const compani* internal_default_instance() {
    return reinterpret_cast<const compani*>(
        &_compani_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(compani& a, compani& b) { a.Swap(&b); }
  inline void Swap(compani* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(compani* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  compani* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<compani>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const compani& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const compani& from) { compani::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(compani* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "compani"; }

 protected:
  explicit compani(::google::protobuf::Arena* arena);
  compani(::google::protobuf::Arena* arena, const compani& from);
  compani(::google::protobuf::Arena* arena, compani&& from) noexcept
      : compani(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLegalAddressFieldNumber = 2,
    kTitleFieldNumber = 3,
    kOccupationFieldNumber = 4,
    kYearOfFoundationFieldNumber = 1,
    kForeignEconomicActivitiesFieldNumber = 5,
  };
  // required string legalAddress = 2;
  bool has_legaladdress() const;
  void clear_legaladdress() ;
  const std::string& legaladdress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_legaladdress(Arg_&& arg, Args_... args);
  std::string* mutable_legaladdress();
  PROTOBUF_NODISCARD std::string* release_legaladdress();
  void set_allocated_legaladdress(std::string* value);

  private:
  const std::string& _internal_legaladdress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legaladdress(
      const std::string& value);
  std::string* _internal_mutable_legaladdress();

  public:
  // required string title = 3;
  bool has_title() const;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // optional string occupation = 4;
  bool has_occupation() const;
  void clear_occupation() ;
  const std::string& occupation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_occupation(Arg_&& arg, Args_... args);
  std::string* mutable_occupation();
  PROTOBUF_NODISCARD std::string* release_occupation();
  void set_allocated_occupation(std::string* value);

  private:
  const std::string& _internal_occupation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_occupation(
      const std::string& value);
  std::string* _internal_mutable_occupation();

  public:
  // required int32 yearOfFoundation = 1;
  bool has_yearoffoundation() const;
  void clear_yearoffoundation() ;
  ::int32_t yearoffoundation() const;
  void set_yearoffoundation(::int32_t value);

  private:
  ::int32_t _internal_yearoffoundation() const;
  void _internal_set_yearoffoundation(::int32_t value);

  public:
  // optional bool foreignEconomicActivities = 5;
  bool has_foreigneconomicactivities() const;
  void clear_foreigneconomicactivities() ;
  bool foreigneconomicactivities() const;
  void set_foreigneconomicactivities(bool value);

  private:
  bool _internal_foreigneconomicactivities() const;
  void _internal_set_foreigneconomicactivities(bool value);

  public:
  // @@protoc_insertion_point(class_scope:compani)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_compani_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const compani& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr legaladdress_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr occupation_;
    ::int32_t yearoffoundation_;
    bool foreigneconomicactivities_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Task_5f3_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// compani

// required int32 yearOfFoundation = 1;
inline bool compani::has_yearoffoundation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void compani::clear_yearoffoundation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yearoffoundation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t compani::yearoffoundation() const {
  // @@protoc_insertion_point(field_get:compani.yearOfFoundation)
  return _internal_yearoffoundation();
}
inline void compani::set_yearoffoundation(::int32_t value) {
  _internal_set_yearoffoundation(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:compani.yearOfFoundation)
}
inline ::int32_t compani::_internal_yearoffoundation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yearoffoundation_;
}
inline void compani::_internal_set_yearoffoundation(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yearoffoundation_ = value;
}

// required string legalAddress = 2;
inline bool compani::has_legaladdress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void compani::clear_legaladdress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.legaladdress_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& compani::legaladdress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:compani.legalAddress)
  return _internal_legaladdress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void compani::set_legaladdress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.legaladdress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:compani.legalAddress)
}
inline std::string* compani::mutable_legaladdress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_legaladdress();
  // @@protoc_insertion_point(field_mutable:compani.legalAddress)
  return _s;
}
inline const std::string& compani::_internal_legaladdress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.legaladdress_.Get();
}
inline void compani::_internal_set_legaladdress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.legaladdress_.Set(value, GetArena());
}
inline std::string* compani::_internal_mutable_legaladdress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.legaladdress_.Mutable( GetArena());
}
inline std::string* compani::release_legaladdress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:compani.legalAddress)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.legaladdress_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.legaladdress_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void compani::set_allocated_legaladdress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.legaladdress_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.legaladdress_.IsDefault()) {
          _impl_.legaladdress_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:compani.legalAddress)
}

// required string title = 3;
inline bool compani::has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void compani::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& compani::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:compani.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void compani::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:compani.title)
}
inline std::string* compani::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:compani.title)
  return _s;
}
inline const std::string& compani::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void compani::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* compani::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* compani::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:compani.title)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.title_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void compani::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:compani.title)
}

// optional string occupation = 4;
inline bool compani::has_occupation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void compani::clear_occupation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.occupation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& compani::occupation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:compani.occupation)
  return _internal_occupation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void compani::set_occupation(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.occupation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:compani.occupation)
}
inline std::string* compani::mutable_occupation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_occupation();
  // @@protoc_insertion_point(field_mutable:compani.occupation)
  return _s;
}
inline const std::string& compani::_internal_occupation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.occupation_.Get();
}
inline void compani::_internal_set_occupation(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.occupation_.Set(value, GetArena());
}
inline std::string* compani::_internal_mutable_occupation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.occupation_.Mutable( GetArena());
}
inline std::string* compani::release_occupation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:compani.occupation)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.occupation_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.occupation_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void compani::set_allocated_occupation(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.occupation_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.occupation_.IsDefault()) {
          _impl_.occupation_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:compani.occupation)
}

// optional bool foreignEconomicActivities = 5;
inline bool compani::has_foreigneconomicactivities() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void compani::clear_foreigneconomicactivities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.foreigneconomicactivities_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool compani::foreigneconomicactivities() const {
  // @@protoc_insertion_point(field_get:compani.foreignEconomicActivities)
  return _internal_foreigneconomicactivities();
}
inline void compani::set_foreigneconomicactivities(bool value) {
  _internal_set_foreigneconomicactivities(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:compani.foreignEconomicActivities)
}
inline bool compani::_internal_foreigneconomicactivities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.foreigneconomicactivities_;
}
inline void compani::_internal_set_foreigneconomicactivities(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.foreigneconomicactivities_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Task_5f3_2eproto_2epb_2eh
